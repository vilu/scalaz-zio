Input list: [1,0,1,1,0,0,1,1,1], MAX_SIZE = 4, MAX=3

1. Reverse input list [1,1,1,0,0,1,1,0,1]
2. Push to stack:
	* i: [1,1,1,0,0,1,1,0,1] 				s: []									size: 0
	* i: [1,1,0,0,1,1,0,1] 					s: [1]									size: 1
	* i: [1,0,0,1,1,0,1] 					s: [1,1]								size: 2
	* i: [0,0,1,1,0,1] 						s: [1,1,1]								size: 3
	* i: [0,1,1,0,1] 						s: [0,1,1,1]							size: 4
	* i: [1,1,0,1] 							s: [0] -> [0,1,1,1]						size: 5
	* i: [1,0,1] 							s: [1,0] -> [0,1,1,1]					size: 6
	* i: [0,1] 								s: [1,1,0] -> [0,1,1,1]					size: 7
	* i: [1] 								s: [0,1,1,0] -> [0,1,1,1] -> null				size: 8
	* i: [] 								s: [1] ->[0,1,1,0] -> [0,1,1,1] -> null			size: 9

3. Prepare a range [0,1,2,3,4,5,6,7,8]

4. map over range and do a getOrElse(i, false)

----------------------------- GetOrElse2
	* s: [1] ->[0,1,1,0] -> [0,1,1,1] -> null			size: 9		index:0,
	  j: 0,
	  cur: [1]
	  mask: 1
	  -> true

//	  * s: [1] ->[0,1,1,0] -> [0,1,1,1] -> null			size: 9		index:0,
//	  j: 1,
//	  cur: [1]
//	  mask: 10
//	  -> false


  	* s: [1] ->[0,1,1,0] -> [0,1,1,1] -> null			size: 9		index:1,
	  j: 1,
	  firstHead: 1
	  cur: [1]
	  -
	  j: 0
	  moreThan1: true
	  cur: [0,1,1,0]
	  mask: [1,0,0,0]


  	* s: [1] ->[0,1,1,0] -> [0,1,1,1] -> null			size: 9		index:2,
	  j: 2,
	  firstHead: 1
	  cur: [1]
	  -
	  j: 1
	  moreThan1: true
	  cur: [0,1,1,0]
	  mask: [1,0,0,0]


